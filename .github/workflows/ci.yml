name: Continuous Integration

#on:
#  push:
#    tags:
#      - 'v*'

on: [push]

jobs:
  finish-ci:
    runs-on: ubuntu-latest
    needs: [build-macos, build-linux, build-windows, build-msys-openmodelica, build-msys, build-docs]
    steps:
    # - uses: actions/upload-artifact/merge@v4
    #   with:
    #     name: binaries
    #     pattern: binaries-* 
    - name: Download All Artifacts
      uses: actions/download-artifact@v5
      with:
        pattern: binaries-* 
        merge-multiple: true
    - name: Determine the name suffix
      id: ref_name
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          echo "This is a tag build"
          echo "ref_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "This is a branch build"
          echo "ref_name=latest" >> $GITHUB_OUTPUT
        fi
    - name: Copy the PDF manual
      run: cp ExternalMedia/Resources/manual.pdf ExternalMedia-${{ steps.ref_name.outputs.ref_name }}.pdf
    - name: Zip all binaries (tag only)
      uses: papeloto/action-zip@v1
      with:
        files: ExternalMedia/
        recursive: true
        dest: ExternalMedia-${{ steps.ref_name.outputs.ref_name }}.zip
    - name: Display the file structure
      run: ls -R
    # - name: Zip binaries
      # uses: papeloto/action-zip@v1
      # with:
        # files: binaries/
        # recursive: true
        # dest: latest.zip
    # - name: Upload zipped binaries
      # uses: actions/upload-artifact@v4
        # with:
          # name: latest
          # path: latest.zip
    # - name: Deploy zipped binaries
      # uses: peaceiris/actions-gh-pages@v3
      # with:
        # github_token: ${{ secrets.GITHUB_TOKEN }}
        # publish_dir: Documentation/html
        # #destination_dir: latest
    - name: Upload zipped binaries
      uses: actions/upload-artifact@v5
      with:
        name: ExternalMedia-binaries
        path: |
          ./ExternalMedia-latest.pdf
          ./ExternalMedia-latest.zip
      if: startsWith(github.ref, 'refs/tags/') == false
    - name: Release on GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./ExternalMedia-*.pdf
          ./ExternalMedia-*.zip
      if: startsWith(github.ref, 'refs/tags/') == true

  build-macos:
    runs-on: ${{ matrix.platform }}
    strategy:
      # Only use one build here, otherwise we cannot control which build is included in the release zip package
      # Check the use of the ${MODELICA_PLATFORM} and ${MODELICA_COMPILER} variables in the CMake files
      matrix:
        include:
          - platform: macos-latest  #  currently macos-26, arm-only
            arch: arm64
          - platform: macos-15-intel
            arch: x86_64
    steps:
    - uses: actions/checkout@v5
    - name: Create Build Environment
      run: |
        cmake --version
        cmake -E make_directory ${{runner.workspace}}/build
    - name: Download CoolProp sources
      run: |
        mkdir externals
        cd externals
        git clone --recursive https://github.com/CoolProp/CoolProp.git CoolProp.git
        cd CoolProp.git
        git checkout tags/v7.1.0
        git submodule update --init --recursive
    - name: Configure with CMake
      working-directory: ${{runner.workspace}}/build
      run: |
       cmake ${GITHUB_WORKSPACE}/Projects -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} -DFLUIDPROP=0 -DCOOLPROP=1 || true
       cmake ${GITHUB_WORKSPACE}/Projects -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} -DFLUIDPROP=0 -DCOOLPROP=1
    - name: Build with CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target ExternalMediaLib
    - name: Install with CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target install
    - name: upload macos artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-macos-${{ matrix.arch }}
        path: Modelica


  build-linux:
    runs-on: ${{ matrix.platform }}
    strategy:
      # Only use one build here, otherwise we cannot control which build is included in the release zip package
      # Check the use of the ${MODELICA_PLATFORM} and ${MODELICA_COMPILER} variables in the CMake files
      matrix:
        include:
          - platform: ubuntu-latest
          #- platform: ubuntu-20.04
          #- platform: ubuntu-18.04
    steps:
    - uses: actions/checkout@v5
    - name: Create Build Environment
      run: |
        cmake --version
        cmake -E make_directory ${{runner.workspace}}/build
    - name: Download CoolProp sources
      run: |
        mkdir externals
        cd externals
        git clone --recursive https://github.com/CoolProp/CoolProp.git CoolProp.git
        cd CoolProp.git
        git checkout tags/v7.1.0
        git submodule update --init --recursive
    - name: Configure with CMake
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake ${GITHUB_WORKSPACE}/Projects -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=0 -DCOOLPROP=1 || true
        cmake ${GITHUB_WORKSPACE}/Projects -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=0 -DCOOLPROP=1
    - name: Build with CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target ExternalMediaLib
    - name: Install with CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target install
    - name: upload linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-linux-x86_64
        path: Modelica


  build-windows:
    runs-on: ${{ matrix.platform }}
    strategy:
      # Use several builds here, Windows requires different builds for different compilers
      # Check the use of the ${MODELICA_PLATFORM} and ${MODELICA_COMPILER} variables in the CMake files
      matrix:
        include:
          - platform: windows-2025
            generator: Visual Studio 17 2022
            arch: Win32
            toolset: v143
          - platform: windows-2025
            generator: Visual Studio 17 2022
            arch: x64
            toolset: v143
          # - platform: windows-2022
          #   generator: Visual Studio 17 2022
          #   arch: Win32
          #   toolset: v143
          # - platform: windows-2022
          #   generator: Visual Studio 17 2022
          #   arch: x64
          #   toolset: v143
          # - platform: windows-2019
          #   generator: Visual Studio 16 2019
          #   arch: Win32
          #   toolset: v142
          # - platform: windows-2019
          #   generator: Visual Studio 16 2019
          #   arch: x64
          #   toolset: v142
          # - platform: windows-2019
          #   generator: Visual Studio 16 2019
          #   arch: Win32
          #   toolset: v141
          # - platform: windows-2019
          #   generator: Visual Studio 16 2019
          #   arch: x64
          #   toolset: v141
          # - platform: windows-2019
          #   generator: Visual Studio 16 2019
          #   arch: Win32
          #   toolset: v140
          # - platform: windows-2019
          #   generator: Visual Studio 16 2019
          #   arch: x64
          #   toolset: v140
          #   #cmake -G "Visual Studio 14" -T v120 -T v141,version=14.11
    steps:
    - uses: actions/checkout@v5
    - name: Download CoolProp sources
      run: |
        mkdir externals
        cd externals
        git clone --recursive https://github.com/CoolProp/CoolProp.git CoolProp.git
        cd CoolProp.git
        git checkout tags/v7.1.0
        git submodule update --init --recursive
    - name: Create Build Environment
      run: |
        cmake --version
        cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure with CMake
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake ${{ runner.workspace }}/ExternalMedia/Projects -A ${{ matrix.arch }} -G "${{ matrix.generator }}" -T "${{ matrix.toolset }}" -DFLUIDPROP=1 -DCOOLPROP=1
        cmake ${{ runner.workspace }}/ExternalMedia/Projects -A ${{ matrix.arch }} -G "${{ matrix.generator }}" -T "${{ matrix.toolset }}" -DFLUIDPROP=1 -DCOOLPROP=1
    - name: Build with CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target ExternalMediaLib --config Release
    - name: Install with CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target install --config Release
    - name: upload windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-windows-${{ matrix.toolset }}-${{ matrix.arch }}
        path: Modelica


  build-msys-openmodelica:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v5
    - name: Download CoolProp sources
      run: |
        mkdir externals
        cd externals
        git clone --recursive https://github.com/CoolProp/CoolProp.git CoolProp.git
        cd CoolProp.git
        git checkout tags/v7.1.0
        git submodule update --init --recursive
    - name: Get OMDev version hash
      run: |
        cmake --version
        git ls-remote https://openmodelica.org/git/OMDev.git HEAD > omdev_hash.txt
    - uses: actions/cache@v4
      id: cache-omdev
      with:
        path: C:/OMDev
        key: pre-commit-${{ hashFiles('omdev_hash.txt') }}
    - name: Create Build Environment
      if: steps.cache-omdev.outputs.cache-hit != 'true'
      run: git clone https://openmodelica.org/git/OMDev.git C:/OMDev
    - name: Configure with CMake for 32bit
      working-directory: ${{runner.workspace}}
      run: |
        $env:Path = "${env:ProgramFiles}\CMake\bin;C:\OMDev\tools\msys\usr\bin;C:\OMDev\tools\msys\mingw32\bin;$env:Path"
        cmake -B build32 -S ${{ runner.workspace }}/ExternalMedia/Projects -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=1 -DCOOLPROP=1
        cmake -B build32 -S ${{ runner.workspace }}/ExternalMedia/Projects -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=1 -DCOOLPROP=1
    - name: Build with CMake for 32bit
      working-directory: ${{runner.workspace}}
      run: |
        $env:Path = "${env:ProgramFiles}\CMake\bin;C:\OMDev\tools\msys\usr\bin;C:\OMDev\tools\msys\mingw32\bin;$env:Path"
        cmake --build build32 --target ExternalMediaLib
        cmake --build build32 --target install
    - name: Configure with CMake for 64bit
      working-directory: ${{runner.workspace}}
      run: |
        $env:Path = "${env:ProgramFiles}\CMake\bin;C:\OMDev\tools\msys\usr\bin;C:\OMDev\tools\msys\mingw64\bin;$env:Path"
        cmake -B build64 -S ${{ runner.workspace }}/ExternalMedia/Projects -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=1 -DCOOLPROP=1
        cmake -B build64 -S ${{ runner.workspace }}/ExternalMedia/Projects -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=1 -DCOOLPROP=1
    - name: Build with CMake for 64bit
      working-directory: ${{runner.workspace}}
      run: |
        $env:Path = "${env:ProgramFiles}\CMake\bin;C:\OMDev\tools\msys\usr\bin;C:\OMDev\tools\msys\mingw64\bin;$env:Path"
        cmake --build build64 --target ExternalMediaLib
        cmake --build build64 --target install
    - name: upload msys-openmodelica artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-windows-msys-openmodelica
        path: Modelica

#set Path=%ProgramFiles%\CMake\bin;C:\OMDev\tools\msys\usr\bin;C:\OMDev\tools\msys\mingw64\bin;%Path%
#cmake -B build64 -S Projects -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=1 -DCOOLPROP=1
#cmake -B build64 -S Projects -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=1 -DCOOLPROP=1
#cmake --build build64 --target ExternalMediaLib
#cmake --build build64 --target install

  build-msys:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v5
    - name: Download CoolProp sources
      run: |
        mkdir externals
        cd externals
        git clone --recursive https://github.com/CoolProp/CoolProp.git CoolProp.git
        cd CoolProp.git
        git checkout tags/v7.1.0
        git submodule update --init --recursive
    - name: Create Build Environment
      run: |
        cmake --version
        cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure with CMake
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake ${{ runner.workspace }}/ExternalMedia/Projects -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=1 -DCOOLPROP=1
        cmake ${{ runner.workspace }}/ExternalMedia/Projects -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DFLUIDPROP=1 -DCOOLPROP=1
    - name: Build with CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target ExternalMediaLib
    - name: Install with CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target install
    #- name: upload msys artifacts
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: binaries-msys
    #    path: Modelica
    
  build-docs:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v5
    - name: Download CoolProp sources
      run: |
        mkdir externals
        cd externals
        git clone --recursive https://github.com/CoolProp/CoolProp.git CoolProp.git
        cd CoolProp.git
        git checkout tags/v7.1.0
        git submodule update --init --recursive

    - name: Build Doxygen sources
      uses: mattnotmitt/doxygen-action@v1
      with:
        working-directory: 'Projects/'
        doxyfile-path: './Doxyfile'
        enable-latex: true

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docs
        path: Projects/Documentation

    - name: Copy PDF to Modelica tree
      run: cp 'Projects/Documentation/latex/refman.pdf' 'Modelica/ExternalMedia/Resources/manual.pdf'

    - name: Upload Modelica sources with PDF
      uses: actions/upload-artifact@v4
      with:
        name: binaries-docs
        path: Modelica

    - name: Deploy generated HTML
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: Projects/Documentation/html
        #destination_dir: latest
